#!/bin/bash
# vim: set ft=sh

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

TMPDIR=${TMPDIR:-/tmp}

source "$(dirname "$0")/common.sh"

payload="$(mktemp "${TMPDIR}/gitlab-merge-request-resource.XXXXXX")"

cat > "${payload}" <&0

configure_ssl_verification "${payload}"

uri="$(jq -r '.source.uri // ""' < "${payload}")"
private_token="$(jq -r '.source.private_token // ""' < "${payload}")"
username="$(jq -r '.source.username // ""' < "${payload}")"
password="$(jq -r '.source.password // ""' < "${payload}")"
private_key="$(jq -r '.source.private_key // ""' < "${payload}")"
no_ssl="$(jq -r '.source.no_ssl // ""' < "${payload}")"
version_sha="$(jq -r '.version.sha // ""' < "${payload}")"

gitlab_host=''
project_path=''
protocol='https'
if [[ ! -z "${private_key}" ]]; then
  gitlab_host="$(echo "${uri}" | sed -rn 's/git@(.*):(.*)\.git/\1/p')"
  project_path="$(echo "${uri}" | sed -rn 's/git@(.*):(.*)\.git/\2/p')"

  id_rsa="${HOME}/.ssh/id_rsa"
  mkdir -p "${HOME}/.ssh/"
  echo "${private_key}" > "${id_rsa}"
  chmod 500 "${id_rsa}"
  ssh-keyscan -t rsa "${gitlab_host}" > "${HOME}/.ssh/known_hosts"
else
  gitlab_host="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\2/p')"
  project_path="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\3/p')"
  protocol="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\1/p')"

  echo "default login ${username} password ${password}" > "${HOME}/.netrc" # Save credentials for git push below
fi
if [ "${no_ssl}" == 'true' ]; then
  protocol='http'
fi

[ -d /tmp/repo ] || git clone "${uri}" /tmp/repo
cd /tmp/repo
git pull

version_updated_at=0
if [ ! -z "${version_sha}" ]; then
  version_updated_at="$(git show -s --format=%ct "${version_sha}")"
fi

project_path_encoded="${project_path//'/'/'%2F'}" # url encode "/"

project_id="$(curl \
--header "PRIVATE-TOKEN: ${private_token}" \
"${protocol}://${gitlab_host}/api/v3/projects/${project_path_encoded}" | jq '.id')"

open_mrs="$(curl \
--header "PRIVATE-TOKEN: ${private_token}" \
"${protocol}://${gitlab_host}/api/v3/projects/${project_id}/merge_requests?state=opened&order_by=updated_at")"

num_mrs="$(echo "${open_mrs}" | jq 'length')"

new_versions=''

for i in $(seq 0 $((num_mrs - 1))); do
  mr="$(echo "${open_mrs}" | jq -r '.['"$i"']')"
  mr_sha="$(echo "${mr}" | jq -r '.sha')"
  mr_updated_at="$(git show -s --format=%ct "${mr_sha}")"

  if [ "${mr_updated_at}" -gt "${version_updated_at}" ] || [ -z "${version_sha}" ]; then
      new_versions="${new_versions},{\"sha\":\"${mr_sha}\"}"
  fi
done

new_versions="${new_versions#','}" # remove trailing comma
new_versions="[${new_versions}]" # make JSON array

if [ "${new_versions}" == '[]' ] && ! [ -z "${version_sha}" ]; then
  new_versions="[{\"sha\":\"${version_sha}\"}]"
fi

jq -n "${new_versions}" >&3
